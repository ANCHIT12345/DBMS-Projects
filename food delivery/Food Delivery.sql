USE `Food Delivery Management System`;


-- Assignment: Aggregate Functions & GROUP BY â€“ Food Delivery Application
-- You are working as a backend data analyst for a food delivery application. Your database has the following core tables:
-- Table Structures
-- Customers
-- Column      DataType  Description
-- customer_id INT (PK)  Unique customer ID
-- name        VARCHAR   Customer name
-- city        VARCHAR   Customerâ€™s city

-- CREATE TABLE Customers
-- (
-- customer_id INT PRIMARY KEY AUTO_INCREMENT,
-- customer_name VARCHAR(50),
-- customer_city VARCHAR(60)
-- );

-- DROP TABLE Customers;

-- Restaurants
-- Column        DataType  Description
-- restaurant_id INT (PK)  Unique restaurant ID
-- name          VARCHAR   Restaurant name
-- city          VARCHAR   Location
-- cuisine_type  VARCHAR   e.g., Indian, Chinese, Italian

-- CREATE TABLE Restaurants
-- (
-- restaurant_id INT PRIMARY KEY AUTO_INCREMENT,
-- restaurant_name VARCHAR(50),
-- restaurant_city VARCHAR(60),
-- cuisine_type VARCHAR(100)
-- );

-- DROP TABLE Restaurants;

-- Orders
-- Column        DataType  Description
-- order_id      INT (PK)  Unique order ID
-- customer_id   INT (FK)  Linked to Customers
-- restaurant_id INT (FK)  Linked to Restaurants
-- order_amount  DECIMAL   Total value of the order
-- order_date    DATE      Date of the order

-- CREATE TABLE Orders
-- (
-- order_id INT PRIMARY KEY AUTO_INCREMENT,
-- customer_id INT REFERENCES Customers(customer_id),
-- restaurant_id INT REFERENCES Restaurants(restaurant_id),
-- order_amount DECIMAL(10,2),
-- order_date DATETIME
-- );

-- DROP TABLE Orders;

-- Assignment Problems
-- ðŸ”¸ . Aggregate Functions
-- COUNT(), SUM(), AVG(), MIN(), MAX()
-- 1.      Find the total number of orders placed on the platform.

SELECT COUNT(*) FROM Orders;

-- 2.      What is the average order value across all orders?

SELECT AVG(order_amount) FROM Orders;

-- 3.      Find the highest and lowest order values recorded.

SELECT MAX(order_amount), MIN(order_amount) FROM Orders;

-- 4.      Get the total revenue generated by each restaurant.

SELECT O.restaurant_id, R.restaurant_name,SUM(O.order_amount) FROM Orders O JOIN Restaurants R ON O.restaurant_id = R.restaurant_id GROUP BY restaurant_id ;

-- 5.      Count how many orders have been placed by each customer.
SELECT O.customer_id, C.customer_name, COUNT(O.customer_id) FROM Orders O JOIN Customers C ON O.customer_id = C.customer_id GROUP BY customer_id;
-- NULL Handling in Aggregates
-- 6.      Modify your AVG calculation to exclude NULL values in order_amount (if any exist).

SELECT AVG(order_amount) FROM Orders;
SELECT AVG(order_amount) FROM Orders WHERE order_amount IS NOT NULL;

-- 7.      If order_amount is sometimes missing, show how COUNT(order_amount) differs from COUNT(*).

SELECT COUNT(*), COUNT(order_amount) FROM Orders;

-- Combining Aggregates with WHERE and GROUP BY
-- 8.      Get the total revenue for each city (based on restaurant city) where total revenue is greater than â‚¹50,000.

SELECT R.restaurant_city, SUM(order_amount) total_revenue 
FROM Restaurants R INNER JOIN Orders O ON R.restaurant_id = O.restaurant_id GROUP BY restaurant_city HAVING SUM(order_amount)>50000 ORDER BY SUM(order_amount) ASC;

-- 9.      Calculate the average order value per cuisine type.

SELECT R.cuisine_type, AVG(order_amount) total_revenue
 FROM Restaurants R INNER JOIN Orders O ON R.restaurant_id = O.restaurant_id GROUP BY cuisine_type ORDER BY AVG(order_amount) ASC;

-- 10.  Show the number of orders and average order amount for each restaurant.

SELECT * FROM Restaurants R JOIN Orders O ON R.restaurant_id = O.restaurant_id;
SELECT R.restaurant_id ,AVG(order_amount) AVG_Order_Amount, COUNT(order_id) number_of_orders 
FROM Restaurants R INNER JOIN Orders O ON R.restaurant_id = O.restaurant_id GROUP BY R.restaurant_id ORDER BY number_of_orders;

-- ðŸ”¸ . GROUP BY and HAVING
-- Purpose of GROUP BY
-- 11.  Group all orders by restaurant_id and calculate the total orders and total revenue for each.

SELECT R.restaurant_id , SUM(order_amount) total_revenue, COUNT(order_id) number_of_orders 
FROM Restaurants R INNER JOIN Orders O ON R.restaurant_id = O.restaurant_id GROUP BY R.restaurant_id ORDER BY SUM(order_amount) ASC; 

-- 12.  Find the number of distinct customers ordering from each cuisine type.

SELECT * FROM Orders O JOIN Restaurants R On O.restaurant_id = R.restaurant_id;
SELECT COUNT(O.customer_id) number_of_distinct_customers, R.cuisine_type 
FROM Orders O INNER JOIN Restaurants R On O.restaurant_id = R.restaurant_id GROUP BY R.cuisine_type ORDER BY number_of_distinct_customers ASC;

-- Grouping by Multiple Columns
-- 13.  Group orders by both city and cuisine_type and calculate total revenue.

SELECT * FROM Orders O JOIN Restaurants R On O.restaurant_id = R.restaurant_id;
SELECT R.cuisine_type,  R.restaurant_city, SUM(order_amount) 
FROM Orders O INNER JOIN Restaurants R On O.restaurant_id = R.restaurant_id GROUP BY  R.cuisine_type, R.restaurant_city ORDER BY  R.restaurant_city, SUM(order_amount) ASC;

-- 14.  Group by customer_id and restaurant_id to find how often each customer ordered from each restaurant.

SELECT customer_id, restaurant_id, COUNT(order_id) ordered_from_each_restaurant FROM Orders GROUP BY customer_id, restaurant_id ORDER BY customer_id ASC;

-- Filtering Grouped Results using HAVING
-- 15.  Find restaurants that have received more than 100 orders.

SELECT restaurant_id, COUNT(Order_id) Total_orders_Of_Each_Restaurant FROM Orders GROUP BY restaurant_id HAVING Total_orders_Of_Each_Restaurant>=100 ORDER BY Total_orders_Of_Each_Restaurant ASC;

-- 16.  List customers who have placed more than 5 orders and have spent over â‚¹5,000 in total.
SELECT O.customer_id, C.customer_name, SUM(order_amount), COUNT(order_id) 
FROM Orders O INNER JOIN Customers C ON O.customer_id = C.customer_id GROUP BY customer_id HAVING SUM(order_amount) > 5000 AND COUNT(order_id) >5 ORDER BY SUM(order_amount) ASC;

-- Difference between WHERE and HAVING
-- 17.  Use WHERE to filter orders placed in the year 2024, then use GROUP BY to find total orders per city.

SELECT * FROM Orders O JOIN Restaurants R ON O.restaurant_id = R.restaurant_id WHERE order_date BETWEEN '2024-01-01 00:00:00' AND '2024-12-31 23:59:59';
SELECT R.restaurant_city, Count(order_id) total_orders_per_city 
FROM Orders O INNER JOIN Restaurants R ON O.restaurant_id = R.restaurant_id WHERE order_date BETWEEN '2024-01-01 00:00:00' AND '2024-12-31 23:59:59' GROUP BY restaurant_city ORDER BY total_orders_per_city ASC;

-- 18.  Write a query to group orders by restaurant, filter total revenue greater than â‚¹30,000 using HAVING.

SELECT * FROM Orders;
SELECT restaurant_id, SUM(order_amount) total_revenue FROM Orders GROUP By restaurant_id HAVING total_revenue > 30000 ORDER BY total_revenue ASC;








